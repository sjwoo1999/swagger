openapi: 3.0.0

info:
  title: Teamitaka Practice API
  version: 1.0.0
  description: |
    Teamitaka 프로젝트 연습을 위한 API 명세서로서, 사용자 관리, 인증, 프로젝트 관리, 모집 공고, 프로필, 댓글, 스크랩, 검색, 대학 인증 등의 기능을 제공합니다.
    이 API는 Node.js와 Express.js를 기반으로 구현되었으며, Swagger UI를 통해 시각화됩니다.  
    주요 기능:
    - 사용자 등록 및 인증 (JWT 기반)
    - 관리자 기능 (관리자 계정 관리, 인증된 이메일 관리)
    - 모집 공고 생성/수정/삭제 및 댓글 관리
    - 프로젝트 생성/수정/삭제 및 멤버 관리
    - 프로필 생성/수정/삭제 및 이력서 조회
    - 스크랩 기능
    - 키워드 기반 검색
    - 대학 인증 (Univecert API 연동)
  contact:
    name: Teamitaka Support
    email: support@teamitaka.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:{port}
    description: 로컬 개발 서버
    variables:
      port:
        default: "3000"
        description: "서버 포트 (동적으로 설정 가능)"
  - url: https://api.teamitaka.com
    description: 프로덕션 서버

tags:
  - name: General
    description: 일반적인 API 엔드포인트
  - name: User
    description: 사용자 관리 관련 API
  - name: Auth
    description: 인증 관련 API
  - name: Admin
    description: 관리자 관련 API
  - name: Recruitment
    description: 모집 공고 관련 API
  - name: Project
    description: 프로젝트 관리 관련 API
  - name: Profile
    description: 프로필 관리 관련 API
  - name: Comment
    description: 댓글 관리 관련 API
  - name: Scrap
    description: 스크랩 관련 API
  - name: Search
    description: 검색 관련 API
  - name: UnivCert
    description: 대학 인증 관련 API
  - name: Health
    description: 서버 상태 확인 관련 API

externalDocs:
  description: Teamitaka API 사용 가이드 및 추가 문서
  url: https://docs.teamitaka.com

paths:
  # 일반 엔드포인트
  /:
    get:
      tags:
        - General
      summary: 환영 메시지
      description: 서버의 기본 경로로 환영 메시지를 반환합니다. API의 상태를 간단히 확인하는 데 유용합니다.
      operationId: getWelcomeMessage
      responses:
        '200':
          description: 성공적으로 메시지 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  message: "Welcome to Teamitaka Practice API!"
                message: ""
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  /hello:
    get:
      tags:
        - General
      summary: Hello World 메시지
      description: 쿼리 파라미터로 전달된 이름을 기반으로 인사말 메시지를 반환합니다.
      operationId: getHelloMessage
      parameters:
        - name: name
          in: query
          description: "인사할 대상의 이름 (기본값: World)"
          required: false
          schema:
            type: string
            default: "World"
      responses:
        '200':
          description: 성공적으로 인사말 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  message: "Hello, World!"
                message: ""
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  # 인증 관련 엔드포인트
  /api/auth/register:
    post:
      tags:
        - Auth
      summary: 사용자 등록
      description: 새로운 사용자를 등록합니다. 사용자 이름, 이메일, 비밀번호를 필요로 하며, 성공 시 JWT 토큰을 반환합니다.
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                  example: "johndoe"
                  description: 사용자 이름 (3~50자)
                email:
                  type: string
                  format: email
                  example: "johndoe@example.com"
                  description: 사용자 이메일 주소
                password:
                  type: string
                  minLength: 8
                  pattern: '^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$'
                  example: "password123"
                  description: 비밀번호 (최소 8자, 문자와 숫자 포함)
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: 사용자 등록 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  user:
                    user_id: 1
                    username: "johndoe"
                    email: "johndoe@example.com"
                    role: "MEMBER"
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                message: "사용자 등록 성공"
        '400':
          description: 필수 필드 누락 또는 형식 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "비밀번호는 최소 8자 이상이어야 하며, 문자와 숫자를 포함해야 합니다."
        '409':
          description: 이미 등록된 이메일
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "이미 등록된 이메일입니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  /api/auth/login:
    post:
      tags:
        - Auth
      summary: 사용자 로그인
      description: 이메일과 비밀번호를 사용하여 사용자를 인증하고 JWT 토큰을 반환합니다.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "johndoe@example.com"
                  description: 사용자 이메일 주소
                password:
                  type: string
                  example: "password123"
                  description: 사용자 비밀번호
              required:
                - email
                - password
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  user:
                    user_id: 1
                    username: "johndoe"
                    email: "johndoe@example.com"
                    role: "MEMBER"
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                message: "로그인 성공"
        '401':
          description: 잘못된 자격 증명
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "잘못된 이메일 또는 비밀번호"
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  /api/auth/validate-password:
    post:
      tags:
        - Auth
      summary: 비밀번호 검증
      description: "제공된 비밀번호가 유효한지 검증합니다 (예: 비밀번호 정책 준수 여부)."
      operationId: validatePassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "password123"
                  description: 검증할 비밀번호
              required:
                - password
      responses:
        '200':
          description: 비밀번호 검증 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  valid: true
                message: "비밀번호가 유효합니다."
        '400':
          description: 비밀번호 형식 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "비밀번호는 최소 8자 이상이어야 하며, 문자와 숫자를 포함해야 합니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  # 관리자 관련 엔드포인트
  /api/admin/login:
    post:
      tags:
        - Admin
      summary: 관리자 로그인
      description: 관리자 계정으로 로그인하여 관리자 전용 JWT 토큰을 반환합니다.
      operationId: loginAdmin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "admin@example.com"
                  description: 관리자 이메일 주소
                password:
                  type: string
                  example: "admin123"
                  description: 관리자 비밀번호
              required:
                - email
                - password
      responses:
        '200':
          description: 관리자 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                message: "관리자 로그인 성공"
        '401':
          description: 잘못된 자격 증명
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "잘못된 이메일 또는 비밀번호"
        '403':
          description: 관리자 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "관리자 계정이 아닙니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  /api/admin/certified-users:
    get:
      tags:
        - Admin
      summary: 인증된 사용자 목록 조회
      description: 대학 인증이 완료된 사용자 목록을 반환합니다.
      operationId: getCertifiedUsers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 인증된 사용자 목록 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  certified_users:
                    - email: "student@korea.ac.kr"
                      certified_date: "2025-02-27T11:00:00.000Z"
                message: ""
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "관리자 권한이 필요합니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  /api/admin/clear-verified-emails:
    delete:
      tags:
        - Admin
      summary: 인증된 이메일 목록 삭제
      description: 모든 인증된 이메일 목록을 삭제합니다.
      operationId: clearVerifiedEmails
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 삭제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data: {}
                message: "모든 인증된 이메일이 삭제되었습니다."
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "관리자 권한이 필요합니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  /api/admin/users:
    post:
      tags:
        - Admin
      summary: 관리자 계정 생성
      description: 새로운 관리자 계정을 생성합니다.
      operationId: createAdmin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "newadmin@example.com"
                  description: 관리자 이메일 주소
                password:
                  type: string
                  minLength: 8
                  example: "admin123"
                  description: 관리자 비밀번호
                role:
                  type: string
                  description: 계정 역할
                  enum: ["ADMIN"]
                  default: "ADMIN"
              required:
                - email
                - password
                - role
      responses:
        '201':
          description: 관리자 계정 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  admin_id: 1
                  email: "newadmin@example.com"
                  role: "ADMIN"
                message: "관리자 계정 생성 성공"
        '400':
          description: 필수 필드 누락
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "모든 필드가 필요합니다."
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "관리자 권한이 필요합니다."
        '409':
          description: 이미 등록된 이메일
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "이미 등록된 이메일입니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"
    get:
      tags:
        - Admin
      summary: 관리자 계정 목록 조회
      description: 모든 관리자 계정 목록을 페이지네이션으로 반환합니다.
      operationId: getAdmins
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: 페이지 번호
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: 페이지당 항목 수
      responses:
        '200':
          description: 관리자 목록 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  admins:
                    - admin_id: 1
                      email: "admin@example.com"
                      role: "ADMIN"
                  total: 1
                  page: 1
                  limit: 10
                message: ""
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components.schemas/ErrorResponse'
              example:
                success: false
                message: "관리자 권한이 필요합니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  /api/admin/users/{id}:
    put:
      tags:
        - Admin
      summary: 관리자 계정 수정
      description: 특정 관리자 계정 정보를 수정합니다.
      operationId: updateAdmin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 수정할 관리자 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "updatedadmin@example.com"
                  description: 새로운 이메일 주소
                role:
                  type: string
                  description: 계정 역할
                  enum: ["ADMIN"]
                  default: "ADMIN"
              required:
                - email
                - role
      responses:
        '200':
          description: 관리자 계정 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  admin_id: 1
                  email: "updatedadmin@example.com"
                  role: "ADMIN"
                message: "관리자 계정 수정 성공"
        '400':
          description: 필수 필드 누락
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "모든 필드가 필요합니다."
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "관리자 권한이 필요합니다."
        '404':
          description: 관리자 계정 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "관리자를 찾을 수 없습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"
    delete:
      tags:
        - Admin
      summary: 관리자 계정 삭제
      description: 특정 관리자 계정을 삭제합니다.
      operationId: deleteAdmin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 삭제할 관리자 ID
      responses:
        '200':
          description: 관리자 계정 삭제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data: {}
                message: "관리자 계정 삭제 성공"
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "관리자 권한이 필요합니다."
        '404':
          description: 관리자 계정 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "관리자를 찾을 수 없습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  # 사용자 관련 엔드포인트
  /api/user:
    get:
      tags:
        - User
      summary: 사용자 목록 조회
      description: 모든 사용자 목록을 페이지네이션으로 반환합니다.
      operationId: getUsers
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: 페이지 번호
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: 페이지당 항목 수
      responses:
        '200':
          description: 사용자 목록 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  users:
                    - user_id: 1
                      username: "johndoe"
                      email: "johndoe@example.com"
                      role: "MEMBER"
                      created_at: "2025-02-27T11:00:00.000Z"
                      updated_at: "2025-02-27T11:00:00.000Z"
                  total: 1
                  page: 1
                  limit: 10
                message: ""
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  /api/user/{id}:
    put:
      tags:
        - User
      summary: 사용자 정보 수정
      description: 특정 사용자의 정보를 수정합니다.
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 수정할 사용자 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "홍길동"
                  description: 새로운 사용자 이름
                email:
                  type: string
                  format: email
                  example: "hong@example.com"
                  description: 새로운 이메일 주소
              required:
                - name
                - email
      responses:
        '200':
          description: 사용자 정보 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  user:
                    user_id: 1
                    name: "홍길동"
                    email: "hong@example.com"
                    updated_at: "2025-02-27T11:00:00.000Z"
                message: "사용자 정보 수정 완료"
        '400':
          description: 필수 필드 누락
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "이름과 이메일은 필수입니다."
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "사용자 수정 권한이 없습니다."
        '404':
          description: 사용자 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "사용자를 찾을 수 없습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"
    delete:
      tags:
        - User
      summary: 사용자 삭제
      description: 특정 사용자를 삭제합니다.
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 삭제할 사용자 ID
      responses:
        '200':
          description: 사용자 삭제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data: {}
                message: "사용자 삭제 완료"
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "사용자 삭제 권한이 없습니다."
        '404':
          description: 사용자 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "사용자를 찾을 수 없습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  # 모집 공고 관련 엔드포인트
  /api/recruitment:
    get:
      tags:
        - Recruitment
      summary: 모집 공고 목록 조회
      description: 모든 모집 공고를 페이지네이션으로 반환합니다.
      operationId: getRecruitments
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: 페이지 번호
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: 페이지당 항목 수
        - name: status
          in: query
          schema:
            type: string
            enum: ["OPEN", "CLOSED", "ALL"]
            default: "ALL"
          description: 모집 공고 상태 필터링
        - name: sort
          in: query
          schema:
            type: string
            enum: ["created_at_asc", "created_at_desc", "title_asc", "title_desc"]
            default: "created_at_desc"
          description: 정렬 기준
      responses:
        '200':
          description: 모집 공고 목록 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  recruitments:
                    - recruitment_id: 1
                      title: "개발자 모집"
                      description: "프로젝트 팀원 모집"
                      status: "OPEN"
                      created_at: "2025-02-27T11:00:00.000Z"
                      updated_at: "2025-02-27T11:00:00.000Z"
                  total: 1
                  page: 1
                  limit: 10
                message: ""
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"
    post:
      tags:
        - Recruitment
      summary: 모집 공고 생성
      description: 새로운 모집 공고를 생성합니다.
      operationId: createRecruitment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: "개발자 모집"
                  description: 모집 공고 제목 (3~100자)
                description:
                  type: string
                  minLength: 10
                  maxLength: 1000
                  example: "프로젝트 팀원 모집"
                  description: 모집 공고 설명 (10~1000자)
                status:
                  type: string
                  enum: ["OPEN", "CLOSED"]
                  default: "OPEN"
                  description: 모집 공고 상태
              required:
                - title
                - description
      responses:
        '201':
          description: 모집 공고 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  recruitment_id: 1
                  title: "개발자 모집"
                  description: "프로젝트 팀원 모집"
                  status: "OPEN"
                  created_at: "2025-02-27T11:00:00.000Z"
                  updated_at: "2025-02-27T11:00:00.000Z"
                message: "모집 공고 생성 완료"
        '400':
          description: 필수 필드 누락 또는 형식 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "제목은 3~100자 이내여야 합니다."
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  /api/recruitment/{recruitment_id}:
    get:
      tags:
        - Recruitment
      summary: 특정 모집 공고 조회
      description: 특정 모집 공고의 상세 정보를 반환합니다.
      operationId: getRecruitmentById
      parameters:
        - name: recruitment_id
          in: path
          required: true
          schema:
            type: integer
          description: 조회할 모집 공고 ID
      responses:
        '200':
          description: 모집 공고 상세 정보 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  recruitment_id: 1
                  title: "개발자 모집"
                  description: "프로젝트 팀원 모집"
                  status: "OPEN"
                  created_at: "2025-02-27T11:00:00.000Z"
                  updated_at: "2025-02-27T11:00:00.000Z"
                message: ""
        '404':
          description: 모집 공고 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "모집 공고를 찾을 수 없습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"
    put:
      tags:
        - Recruitment
      summary: 모집 공고 수정
      description: 특정 모집 공고의 정보를 수정합니다.
      operationId: updateRecruitment
      security:
        - bearerAuth: []
      parameters:
        - name: recruitment_id
          in: path
          required: true
          schema:
            type: integer
          description: 수정할 모집 공고 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: "개발자 모집 수정"
                  description: 수정할 제목 (3~100자)
                description:
                  type: string
                  minLength: 10
                  maxLength: 1000
                  example: "프로젝트 팀원 모집 (수정됨)"
                  description: 수정할 설명 (10~1000자)
                status:
                  type: string
                  enum: ["OPEN", "CLOSED"]
                  description: 수정할 상태
              required:
                - title
                - description
      responses:
        '200':
          description: 모집 공고 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  recruitment_id: 1
                  title: "개발자 모집 수정"
                  description: "프로젝트 팀원 모집 (수정됨)"
                  status: "OPEN"
                  updated_at: "2025-02-27T11:00:00.000Z"
                message: "모집 공고 수정 완료"
        '400':
          description: 필수 필드 누락 또는 형식 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "제목은 3~100자 이내여야 합니다."
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components.schemas/ErrorResponse'
              example:
                success: false
                message: "모집 공고 수정 권한이 없습니다."
        '404':
          description: 모집 공고 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "모집 공고를 찾을 수 없습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"
    delete:
      tags:
        - Recruitment
      summary: 모집 공고 삭제
      description: 특정 모집 공고를 삭제합니다.
      operationId: deleteRecruitment
      security:
        - bearerAuth: []
      parameters:
        - name: recruitment_id
          in: path
          required: true
          schema:
            type: integer
          description: 삭제할 모집 공고 ID
      responses:
        '200':
          description: 모집 공고 삭제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data: {}
                message: "모집 공고 삭제 완료"
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "모집 공고 삭제 권한이 없습니다."
        '404':
          description: 모집 공고 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "모집 공고를 찾을 수 없습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  # 프로젝트 관련 엔드포인트
  /api/projects:
    get:
      tags:
        - Project
      summary: 프로젝트 목록 조회
      description: 모든 프로젝트를 페이지네이션으로 반환합니다.
      operationId: getProjects
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: 페이지 번호
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: 페이지당 항목 수
        - name: status
          in: query
          schema:
            type: string
            enum: ["진행중", "완료", "중단", "ALL"]
            default: "ALL"
          description: 프로젝트 상태 필터링
        - name: sort
          in: query
          schema:
            type: string
            enum: ["created_at_asc", "created_at_desc", "title_asc", "title_desc"]
            default: "created_at_desc"
          description: 정렬 기준
      responses:
        '200':
          description: 프로젝트 목록 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  projects:
                    - project_id: 1
                      title: "프로젝트 A"
                      description: "프로젝트 설명"
                      status: "진행중"
                      created_at: "2025-02-27T11:00:00.000Z"
                      updated_at: "2025-02-27T11:00:00.000Z"
                  total: 1
                  page: 1
                  limit: 10
                message: ""
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"
    post:
      tags:
        - Project
      summary: 프로젝트 생성
      description: 새로운 프로젝트를 생성합니다.
      operationId: createProject
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: "프로젝트 A"
                  description: 프로젝트 제목 (3~100자)
                description:
                  type: string
                  minLength: 10
                  maxLength: 1000
                  example: "프로젝트 설명"
                  description: 프로젝트 설명 (10~1000자)
                status:
                  type: string
                  enum: ["진행중", "완료", "중단"]
                  default: "진행중"
                  description: 프로젝트 상태
              required:
                - title
                - description
      responses:
        '201':
          description: 프로젝트 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  project_id: 1
                  title: "프로젝트 A"
                  description: "프로젝트 설명"
                  status: "진행중"
                  created_at: "2025-02-27T11:00:00.000Z"
                  updated_at: "2025-02-27T11:00:00.000Z"
                message: "프로젝트 생성 완료"
        '400':
          description: 필수 필드 누락 또는 형식 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "제목은 3~100자 이내여야 합니다."
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  /api/projects/{project_id}:
    get:
      tags:
        - Project
      summary: 특정 프로젝트 조회
      description: 특정 프로젝트의 상세 정보를 반환합니다.
      operationId: getProjectById
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
          description: 조회할 프로젝트 ID
      responses:
        '200':
          description: 프로젝트 상세 정보 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  project_id: 1
                  title: "프로젝트 A"
                  description: "프로젝트 설명"
                  status: "진행중"
                  created_at: "2025-02-27T11:00:00.000Z"
                  updated_at: "2025-02-27T11:00:00.000Z"
                message: ""
        '404':
          description: 프로젝트 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "프로젝트를 찾을 수 없습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"
    put:
      tags:
        - Project
      summary: 프로젝트 수정
      description: 특정 프로젝트의 정보를 수정합니다.
      operationId: updateProject
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
          description: 수정할 프로젝트 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: "프로젝트 A 수정"
                  description: 수정할 프로젝트 제목 (3~100자)
                description:
                  type: string
                  minLength: 10
                  maxLength: 1000
                  example: "프로젝트 설명 (수정됨)"
                  description: 수정할 프로젝트 설명 (10~1000자)
                status:
                  type: string
                  enum: ["진행중", "완료", "중단"]
                  description: 수정할 프로젝트 상태
              required:
                - title
                - description
      responses:
        '200':
          description: 프로젝트 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  project_id: 1
                  title: "프로젝트 A 수정"
                  description: "프로젝트 설명 (수정됨)"
                  status: "진행중"
                  updated_at: "2025-02-27T11:00:00.000Z"
                message: "프로젝트 수정 완료"
        '400':
          description: 필수 필드 누락 또는 형식 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "제목은 3~100자 이내여야 합니다."
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "프로젝트 수정 권한이 없습니다."
        '404':
          description: 프로젝트 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "프로젝트를 찾을 수 없습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"
    delete:
      tags:
        - Project
      summary: 프로젝트 삭제
      description: 특정 프로젝트를 삭제합니다.
      operationId: deleteProject
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
          description: 삭제할 프로젝트 ID
      responses:
        '200':
          description: 프로젝트 삭제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data: {}
                message: "프로젝트 삭제 완료"
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "프로젝트 삭제 권한이 없습니다."
        '404':
          description: 프로젝트 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "프로젝트를 찾을 수 없습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  /api/projects/completed:
    get:
      tags:
        - Project
      summary: 완료된 프로젝트 목록 조회
      description: 완료된 프로젝트 목록을 페이지네이션으로 반환합니다.
      operationId: getCompletedProjects
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: 페이지 번호
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: 페이지당 항목 수
        - name: sort
          in: query
          schema:
            type: string
            enum: ["created_at_asc", "created_at_desc", "title_asc", "title_desc"]
            default: "created_at_desc"
          description: 정렬 기준
      responses:
        '200':
          description: 완료된 프로젝트 목록 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  projects:
                    - project_id: 2
                      title: "프로젝트 B"
                      description: "완료된 프로젝트"
                      status: "완료"
                      created_at: "2025-02-27T11:00:00.000Z"
                      updated_at: "2025-02-27T11:00:00.000Z"
                  total: 1
                  page: 1
                  limit: 10
                message: ""
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  /api/projects/{project_id}/members:
    get:
      tags:
        - Project
      summary: 프로젝트 멤버 목록 조회
      description: 특정 프로젝트의 멤버 목록을 반환합니다.
      operationId: getProjectMembers
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
          description: 멤버를 조회할 프로젝트 ID
      responses:
        '200':
          description: 멤버 목록 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  members:
                    - user_id: 1
                      username: "johndoe"
                      role: "팀원"
                      joined_at: "2025-02-27T11:00:00.000Z"
                message: ""
        '404':
          description: 프로젝트 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "프로젝트를 찾을 수 없습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"
    post:
      tags:
        - Project
      summary: 프로젝트 멤버 추가
      description: 특정 프로젝트에 새로운 멤버를 추가합니다.
      operationId: addProjectMember
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
          description: 멤버를 추가할 프로젝트 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 2
                  description: 추가할 사용자 ID
                role:
                  type: string
                  enum: ["팀원", "리더", "매니저"]
                  example: "팀원"
                  description: 멤버 역할
              required:
                - user_id
                - role
      responses:
        '201':
          description: 멤버 추가 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  user_id: 2
                  role: "팀원"
                  joined_at: "2025-02-27T11:00:00.000Z"
                message: "멤버 추가 완료"
        '400':
          description: 필수 필드 누락
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "사용자 ID와 역할은 필수입니다."
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "멤버 추가 권한이 없습니다."
        '404':
          description: 프로젝트 또는 사용자 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "프로젝트 또는 사용자를 찾을 수 없습니다."
        '409':
          description: 이미 멤버로 등록됨
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "이미 프로젝트 멤버로 등록된 사용자입니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  # 프로필 관련 엔드포인트
  /api/profiles/{user_id}:
    get:
      tags:
        - Profile
      summary: 사용자 프로필 조회
      description: 특정 사용자의 프로필 정보를 반환합니다.
      operationId: getProfile
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: 프로필을 조회할 사용자 ID
      responses:
        '200':
          description: 프로필 정보 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  user_id: 1
                  nickname: "johndoe"
                  university: "고려대학교"
                  created_at: "2025-02-27T11:00:00.000Z"
                  updated_at: "2025-02-27T11:00:00.000Z"
                message: ""
        '404':
          description: 프로필 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "프로필을 찾을 수 없습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  /api/profiles:
    post:
      tags:
        - Profile
      summary: 프로필 생성
      description: 새로운 프로필을 생성합니다.
      operationId: createProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                  description: 프로필을 생성할 사용자 ID
                nickname:
                  type: string
                  minLength: 1
                  maxLength: 50
                  example: "johndoe"
                  description: 사용자 닉네임 (1~50자)
                university:
                  type: string
                  minLength: 1
                  maxLength: 100
                  example: "고려대학교"
                  description: 소속 대학 (1~100자)
              required:
                - user_id
                - nickname
                - university
      responses:
        '201':
          description: 프로필 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  user_id: 1
                  nickname: "johndoe"
                  university: "고려대학교"
                  created_at: "2025-02-27T11:00:00.000Z"
                message: "프로필 생성 완료"
        '400':
          description: 필수 필드 누락 또는 형식 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "닉네임은 1~50자 이내여야 합니다."
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '409':
          description: 이미 프로필이 존재함
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "해당 사용자에 대한 프로필이 이미 존재합니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  /api/profiles/{profile_id}:
    put:
      tags:
        - Profile
      summary: 프로필 수정
      description: 특정 프로필 정보를 수정합니다.
      operationId: updateProfile
      security:
        - bearerAuth: []
      parameters:
        - name: profile_id
          in: path
          required: true
          schema:
            type: integer
          description: 수정할 프로필 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                  minLength: 1
                  maxLength: 50
                  example: "johndoe2"
                  description: 수정할 닉네임 (1~50자)
                university:
                  type: string
                  minLength: 1
                  maxLength: 100
                  example: "서울대학교"
                  description: 수정할 소속 대학 (1~100자)
              required:
                - nickname
                - university
      responses:
        '200':
          description: 프로필 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  user_id: 1
                  nickname: "johndoe2"
                  university: "서울대학교"
                  updated_at: "2025-02-27T11:00:00.000Z"
                message: "프로필 수정 완료"
        '400':
          description: 필수 필드 누락 또는 형식 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "닉네임은 1~50자 이내여야 합니다."
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "프로필 수정 권한이 없습니다."
        '404':
          description: 프로필 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "프로필을 찾을 수 없습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"
    delete:
      tags:
        - Profile
      summary: 프로필 삭제
      description: 특정 프로필을 삭제합니다.
      operationId: deleteProfile
      security:
        - bearerAuth: []
      parameters:
        - name: profile_id
          in: path
          required: true
          schema:
            type: integer
          description: 삭제할 프로필 ID
      responses:
        '200':
          description: 프로필 삭제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data: {}
                message: "프로필 삭제 완료"
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "프로필 삭제 권한이 없습니다."
        '404':
          description: 프로필 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "프로필을 찾을 수 없습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  /api/profiles/resume/{user_id}:
    get:
      tags:
        - Profile
      summary: 사용자 이력서 조회
      description: 특정 사용자의 이력서 정보를 반환합니다. 이력서에는 기본 프로필 정보와 참여한 프로젝트 목록이 포함됩니다.
      operationId: getResume
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: 이력서를 조회할 사용자 ID
      responses:
        '200':
          description: 이력서 정보 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  profile:
                    user_id: 1
                    nickname: "johndoe"
                    university: "고려대학교"
                  projects:
                    - project_id: 1
                      title: "프로젝트 A"
                      description: "프로젝트 설명"
                      status: "진행중"
                      role: "팀원"
                      joined_at: "2025-02-27T11:00:00.000Z"
                message: ""
        '404':
          description: 프로필 또는 이력서 정보 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "프로필을 찾을 수 없습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  # 댓글 관련 엔드포인트
  /api/recruitments/{recruitment_id}/comment:
    get:
      tags:
        - Comment
      summary: 댓글 목록 조회
      description: 특정 모집 공고에 달린 댓글 목록을 페이지네이션으로 반환합니다.
      operationId: getComments
      parameters:
        - name: recruitment_id
          in: path
          required: true
          schema:
            type: integer
          description: 댓글을 조회할 모집 공고 ID
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: 페이지 번호
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: 페이지당 항목 수
        - name: sort
          in: query
          schema:
            type: string
            enum: ["created_at_asc", "created_at_desc"]
            default: "created_at_desc"
          description: 정렬 기준
      responses:
        '200':
          description: 댓글 목록 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  comments:
                    - comment_id: 1
                      content: "좋은 공고네요!"
                      user_id: 1
                      username: "johndoe"
                      recruitment_id: 1
                      created_at: "2025-02-27T11:00:00.000Z"
                      updated_at: "2025-02-27T11:00:00.000Z"
                  total: 1
                  page: 1
                  limit: 10
                message: ""
        '404':
          description: 모집 공고 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "모집 공고를 찾을 수 없습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components.schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"
    post:
      tags:
        - Comment
      summary: 댓글 작성
      description: 특정 모집 공고에 댓글을 작성합니다. 욕설 필터링이 적용됩니다.
      operationId: createComment
      security:
        - bearerAuth: []
      parameters:
        - name: recruitment_id
          in: path
          required: true
          schema:
            type: integer
          description: 댓글을 작성할 모집 공고 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  minLength: 1
                  maxLength: 500
                  example: "좋은 공고네요!"
                  description: 댓글 내용 (1~500자, 욕설 금지)
              required:
                - content
      responses:
        '201':
          description: 댓글 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  comment_id: 1
                  content: "좋은 공고네요!"
                  user_id: 1
                  recruitment_id: 1
                  created_at: "2025-02-27T11:00:00.000Z"
                message: "댓글 작성 완료"
        '400':
          description: 필수 필드 누락 또는 욕설 포함
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "댓글에 부적절한 언어가 포함되었습니다."
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '404':
          description: 모집 공고 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "모집 공고를 찾을 수 없습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  /api/recruitments/{recruitment_id}/comment/{comment_id}:
    put:
      tags:
        - Comment
      summary: 댓글 수정
      description: 특정 모집 공고의 특정 댓글을 수정합니다. 욕설 필터링이 적용됩니다.
      operationId: updateComment
      security:
        - bearerAuth: []
      parameters:
        - name: recruitment_id
          in: path
          required: true
          schema:
            type: integer
          description: 댓글이 속한 모집 공고 ID
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
          description: 수정할 댓글 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  minLength: 1
                  maxLength: 500
                  example: "수정된 댓글입니다!"
                  description: 수정할 댓글 내용 (1~500자, 욕설 금지)
              required:
                - content
      responses:
        '200':
          description: 댓글 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  comment_id: 1
                  content: "수정된 댓글입니다!"
                  user_id: 1
                  recruitment_id: 1
                  updated_at: "2025-02-27T11:00:00.000Z"
                message: "댓글 수정 완료"
        '400':
          description: 필수 필드 누락 또는 욕설 포함
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "댓글에 부적절한 언어가 포함되었습니다."
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "댓글 수정 권한이 없습니다."
        '404':
          description: 댓글 또는 모집 공고 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "댓글을 찾을 수 없습니다."
        '500':
          example:
            success: false
            message: "서버 오류 발생"
    delete:
      tags:
        - Comment
      summary: 댓글 삭제
      description: 특정 모집 공고의 특정 댓글을 삭제합니다.
      operationId: deleteComment
      security:
        - bearerAuth: []
      parameters:
        - name: recruitment_id
          in: path
          required: true
          schema:
            type: integer
          description: 댓글이 속한 모집 공고 ID
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
          description: 삭제할 댓글 ID
      responses:
        '200':
          description: 댓글 삭제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data: {}
                message: "댓글 삭제 완료"
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "댓글 삭제 권한이 없습니다."
        '404':
          description: 댓글 또는 모집 공고 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "댓글을 찾을 수 없습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components.schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  # 스크랩 관련 엔드포인트
  /api/scraps/recruitments:
    get:
      tags:
        - Scrap
      summary: 스크랩한 모집 공고 목록 조회
      description: 현재 사용자가 스크랩한 모집 공고 목록을 페이지네이션으로 반환합니다.
      operationId: getScrapedRecruitments
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: 페이지 번호
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: 페이지당 항목 수
        - name: sort
          in: query
          schema:
            type: string
            enum: ["created_at_asc", "created_at_desc", "title_asc", "title_desc"]
            default: "created_at_desc"
          description: 정렬 기준
      responses:
        '200':
          description: 스크랩 목록 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  recruitments:
                    - recruitment_id: 1
                      user_id: 1
                      title: "개발자 모집"
                      description: "프로젝트 팀원 모집"
                      status: "OPEN"
                      scrap_count: 5
                      created_at: "2025-02-27T11:00:00.000Z"
                      updated_at: "2025-02-27T11:00:00.000Z"
                  total: 1
                  page: 1
                  limit: 10
                message: ""
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  /api/recruitment/{recruitment_id}/scrap:
    put:
      tags:
        - Scrap
      summary: 모집 공고 스크랩 토글
      description: 특정 모집 공고를 스크랩하거나 스크랩을 취소합니다.
      operationId: toggleScrap
      security:
        - bearerAuth: []
      parameters:
        - name: recruitment_id
          in: path
          required: true
          schema:
            type: integer
          description: 스크랩할 모집 공고 ID
      responses:
        '200':
          description: 스크랩 상태 변경 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  action: "스크랩 추가"
                  recruitment_id: 1
                  user_id: 1
                  scrap_count: 6
                message: "스크랩 상태 변경 완료"
        '401':
          description: 인증되지 않은 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "인증되지 않았습니다."
        '404':
          description: 모집 공고 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "모집 공고를 찾을 수 없습니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  # 검색 관련 엔드포인트
  /api/search:
    get:
      tags:
        - Search
      summary: 키워드 검색
      description: 키워드를 기반으로 모집 공고, 프로젝트, 사용자 등을 검색합니다.
      operationId: search
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            example: "개발자"
          description: 검색 키워드
        - name: type
          in: query
          schema:
            type: string
            enum: ["recruitment", "project", "user", "all"]
            default: "all"
          description: 검색 대상 타입
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: 페이지 번호
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: 페이지당 항목 수
        - name: sort
          in: query
          schema:
            type: string
            enum: ["relevance", "created_at_asc", "created_at_desc"]
            default: "relevance"
          description: 정렬 기준
      responses:
        '200':
          description: 검색 결과 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  results:
                    - type: "recruitment"
                      recruitment_id: 1
                      title: "개발자 모집"
                      description: "프로젝트 팀원 모집"
                      created_at: "2025-02-27T11:00:00.000Z"
                    - type: "user"
                      user_id: 1
                      username: "johndoe"
                      email: "johndoe@example.com"
                      created_at: "2025-02-27T11:00:00.000Z"
                  total: 2
                  page: 1
                  limit: 10
                message: ""
        '400':
          description: 검색 키워드 누락
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "검색 키워드가 필요합니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버 오류 발생"

  # 대학 인증 관련 엔드포인트
  /api/univcert/send-otp:
    post:
      tags:
        - UnivCert
      summary: OTP 발송
      description: 지정된 대학 이메일로 인증용 OTP를 발송합니다 (Univecert API 연동). 요율 제한이 적용됩니다.
      operationId: sendOtp
      x-rate-limit:
        limit: 5
        period: 60
        description: 분당 5회로 요청 제한
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "student@korea.ac.kr"
                  description: 인증할 대학 이메일 주소
              required:
                - email
      responses:
        '200':
          description: OTP 발송 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  message: "OTP 발송 완료"
                message: ""
        '400':
          description: 유효하지 않은 이메일
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "지원되지 않는 대학 이메일입니다."
        '429':
          description: 요청 횟수 초과
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "요청 횟수를 초과했습니다. 잠시 후 다시 시도하세요."
        '500':
          description: 서버 오류 또는 외부 API 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "외부 API 호출 중 오류 발생"

  /api/univcert/verify-otp:
    post:
      tags:
        - UnivCert
      summary: OTP 검증
      description: 발송된 OTP 코드를 검증하여 대학 인증을 완료합니다.
      operationId: verifyOtp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "student@korea.ac.kr"
                  description: 인증할 대학 이메일 주소
                code:
                  type: string
                  minLength: 6
                  maxLength: 6
                  example: "123456"
                  description: 발송된 OTP 코드 (6자리 숫자)
              required:
                - email
                - code
      responses:
        '200':
          description: OTP 검증 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  certified_email: "student@korea.ac.kr"
                  certified_date: "2025-02-27T11:00:00.000Z"
                message: "대학 인증 성공"
        '400':
          description: 잘못된 OTP 코드 또는 형식 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "잘못된 OTP 코드입니다."
        '500':
          description: 서버 오류 또는 외부 API 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "외부 API 호출 중 오류 발생"

  # 서버 상태 확인 엔드포인트
  /health:
    get:
      tags:
        - Health
      summary: 서버 상태 확인
      description: 서버가 정상적으로 동작 중인지 확인합니다. API의 헬스 체크 용도로 사용됩니다.
      operationId: getHealth
      responses:
        '200':
          description: 서버 정상
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  status: "healthy"
                  uptime: 3600
                  timestamp: "2025-02-27T11:00:00.000Z"
                message: "서버가 정상적으로 동작 중입니다."
        '503':
          description: 서버 비정상
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "서버가 비정상 상태입니다."

# 공통 구성 요소
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          description: 요청 성공 여부
        data:
          type: object
          description: 반환 데이터
        message:
          type: string
          description: 추가 메시지
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          default: false
          description: 요청 실패 여부
        message:
          type: string
          description: 오류 메시지
    User:
      type: object
      properties:
        user_id:
          type: integer
          description: 사용자 ID
        username:
          type: string
          description: 사용자 이름
        email:
          type: string
          format: email
          description: 사용자 이메일 주소
        role:
          type: string
          enum: ["MEMBER", "ADMIN"]
          description: 사용자 역할
        created_at:
          type: string
          format: date-time
          description: 생성 시간
        updated_at:
          type: string
          format: date-time
          description: 수정 시간
    Recruitment:
      type: object
      properties:
        recruitment_id:
          type: integer
          description: 모집 공고 ID
        title:
          type: string
          description: 모집 공고 제목
        description:
          type: string
          description: 모집 공고 설명
        status:
          type: string
          enum: ["OPEN", "CLOSED"]
          description: 모집 공고 상태
        created_at:
          type: string
          format: date-time
          description: 생성 시간
        updated_at:
          type: string
          format: date-time
          description: 수정 시간
    Project:
      type: object
      properties:
        project_id:
          type: integer
          description: 프로젝트 ID
        title:
          type: string
          description: 프로젝트 제목
        description:
          type: string
          description: 프로젝트 설명
        status:
          type: string
          enum: ["진행중", "완료", "중단"]
          description: 프로젝트 상태
        created_at:
          type: string
          format: date-time
          description: 생성 시간
        updated_at:
          type: string
          format: date-time
          description: 수정 시간
    Comment:
      type: object
      properties:
        comment_id:
          type: integer
          description: 댓글 ID
        content:
          type: string
          description: 댓글 내용
        user_id:
          type: integer
          description: 작성자 ID
        username:
          type: string
          description: 작성자 이름
        recruitment_id:
          type: integer
          description: 댓글이 속한 모집 공고 ID
        created_at:
          type: string
          format: date-time
          description: 생성 시간
        updated_at:
          type: string
          format: date-time
          description: 수정 시간

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT 기반 인증 토큰 (Bearer 형식)